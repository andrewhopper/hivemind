version: "1.0"

# Communication settings
communication:
  emojis:
    design:
      start: "üé® Starting design phase..."
      thinking: "ü§î Analyzing design requirements..."
      diagram: "üìä Creating system diagram..."
      complete: "‚ú® Design spec created in docs/design/"
    
    implement:
      start: "üöÄ Starting implementation..."
      progress: "‚öôÔ∏è Implementing features..."
      testing: "üß™ Testing implementation..."
      complete: "‚úÖ Implementation finished"
    
    validate:
      start: "üîç Starting validation..."
      checking: "üìã Checking against facts..."
      issue: "‚ö†Ô∏è Found compliance issue..."
      pass: "‚úÖ Validation passed"
      fail: "‚ùå Validation failed"
      complete: "üìù Validation report created in docs/validation/"
    
    revise:
      start: "üîÑ Starting revision..."
      progress: "üìù Making changes..."
      complete: "‚ú® Revision complete"
    
    refactor:
      start: "üîß Starting refactoring..."
      progress: "üî® Refactoring in progress..."
      metrics: "üìä Checking quality metrics..."
      complete: "‚ú® Refactoring complete"

# Documentation settings
documentation:
  output_dir: "./docs"
  templates:
    design:
      path: "docs/design"
      files:
        - name: "{timestamp}-design-spec.md"
          sections:
            - "Overview"
            - "Architecture"
            - "Components"
            - "Data Flow"
            - "Technical Decisions"
    
    validate:
      path: "docs/validation"
      files:
        - name: "{timestamp}-validation-report.md"
          sections:
            - "Executive Summary"
            - "Validation Context"
            - "Required Facts"
              subsections:
                - "Compliant"
                - "Non-compliant"
                - "Not Applicable"
            - "Recommended Facts"
              subsections:
                - "Implemented"
                - "Missing"
            - "Performance Metrics"
            - "Security Analysis"
            - "Code Quality Metrics"
            - "Issues"
              subsections:
                - "Critical"
                - "Major"
                - "Minor"
            - "Recommendations"
            - "Next Steps"

# Operation modes configuration
modes:
  design:
    description: "Architecture and system design phase"
    allowed_operations:
      - read_file
      - list_files
      - search_files
      - list_code_definition_names
      - write_to_file:
        extensions: [".md", ".mdx", ".mmd"]
      - access_mcp_resource
      - use_mcp_tool
      - ask_followup_question
    restrictions:
      - "No code modifications allowed"
      - "Can only create/modify markdown and mermaid files"
      - "Focus on architecture documentation and diagrams"

  implement:
    description: "Code implementation phase"
    allowed_operations:
      - all
    restrictions:
      - "Must follow design documents"
      - "Must validate against facts"

  validate:
    description: "Verification and compliance checking"
    allowed_operations:
      - read_file
      - list_files
      - search_files
      - list_code_definition_names
      - write_to_file:
        extensions: [".md"]
      - browser_action
      - execute_command:
        type: "read-only"
      - access_mcp_resource
      - use_mcp_tool
      - ask_followup_question
    restrictions:
      - "No code modifications allowed"
      - "Can only create validation reports in markdown"
      - "Can run tests and analysis tools"

  revise:
    description: "Code modification and improvement"
    allowed_operations:
      - all
    restrictions:
      - "Must maintain existing architecture"
      - "Changes must be validated against facts"

  refactor:
    description: "Code restructuring and optimization"
    allowed_operations:
      - all
    restrictions:
      - "Must maintain existing functionality"
      - "Must improve code quality metrics"
      - "Changes must be validated against facts"

# Facts integration settings
facts:
  # Automatically save decisions made during development
  auto_save: true
  
  # Default settings for new facts
  defaults:
    strictness: "RECOMMENDED"  # Default strictness level
    min_version: "1.0.0"      # Minimum version compatibility
    max_version: "*"          # Maximum version compatibility ("*" means latest)
    
  # Validation settings
  validation:
    # Validate all proposals against existing facts
    validate_proposals: true
    # Stop if validation fails for REQUIRED facts
    strict_validation: true
    # Categories to validate against
    categories: [
      "ARCHITECTURE_PATTERN",
      "DATABASE",
      "FRONTEND",
      "BACKEND",
      "DOCUMENTATION"
    ]
    
    # Validation stages
    stages:
      pre_planning:
        enabled: true
        categories:
          - ARCHITECTURE_PATTERN
          - PROJECT_STRUCTURE
          - FRAMEWORK
          - DATABASE
          - SECURITY
        actions:
          on_validation:
            - check_required_facts
            - determine_tools
            - set_constraints
          on_failure:
            - block_planning
            - generate_requirements
      
      post_planning:
        enabled: true
        categories:
          - ARCHITECTURE_PATTERN
          - DESIGN_PATTERN
          - PROJECT_STRUCTURE
          - FRAMEWORK
        actions:
          on_validation:
            - validate_architecture
            - check_dependencies
            - verify_patterns
          on_failure:
            - reject_plan
            - generate_violations_report
      
      post_implementation:
        enabled: true
        categories:
          - all
        checks:
          - type: automated
            patterns:
              - file_structure
              - dependency_usage
              - security_compliance
          - type: manual
            patterns:
              - code_quality
              - pattern_adherence
        actions:
          on_success:
            - generate_compliance_report
            - update_metrics
          on_failure:
            - generate_issues_report
            - suggest_fixes
    # LLM-based validation hooks
    hooks:
      pre_commit: true      # Validate before git commits
      pre_deploy: true      # Validate before deployments
      pull_request: true    # Validate on PR creation/update
    
    # LLM-based preflight validation
    preflight:
      enabled: true
      post_implementation: true
      report_path: "docs/validation"
      checks:
        - type: "architecture"
          categories: ["ARCHITECTURE_PATTERN", "PROJECT_STRUCTURE", "DESIGN_PATTERN"]
          strictness: ["REQUIRED", "RECOMMENDED"]
        - type: "database"
          categories: ["DATABASE"]
          strictness: ["REQUIRED"]
        - type: "api"
          categories: ["BACKEND", "FRONTEND"]
          strictness: ["REQUIRED"]
      actions:
        on_failure:
          - generate_report
          - fail_implementation
        on_success:
          - generate_report
          - mark_validated
    
    # LLM-based postflight validation
    postflight:
      enabled: true
      report_path: "docs/validation/postflight"
      checks:
        - type: "performance"
          thresholds:
            response_time: 200
            memory_usage: 512
        - type: "security"
          categories: ["SECURITY"]
          strictness: ["REQUIRED"]
        - type: "quality"
          metrics:
            code_coverage: 80
            complexity: 20
      actions:
        on_failure:
          - generate_report
          - notify_team
        on_success:
          - generate_report
          - update_metrics
    
  # Automatic fact creation triggers
  triggers:
    # Create facts when new dependencies are added
    dependencies:
      - package.json
      - requirements.txt
      - pyproject.toml
      - Cargo.toml
    
    # Create facts for new architectural components
    architecture:
      - "**/*.config.{js,ts}"
      - "**/schema.prisma"
      - "**/docker-compose.yml"
      - "**/Dockerfile"
    
    # Create facts for API contracts
    api:
      - "**/api/**/*.{ts,js}"
      - "**/routes/**/*.{ts,js}"
      - "**/*.proto"
      - "**/openapi.{yaml,yml,json}"
    
    # Create facts for security configurations
    security:
      - "**/auth/**/*.{ts,js}"
      - "**/*.env.example"
      - "**/security.config.{js,ts}"

  # Fact type mappings
  types:
    architecture_decision: 
      category: "ARCHITECTURE_PATTERN"
      strictness: "REQUIRED"
    
    code_style:
      category: "CODE_STYLE"
      strictness: "RECOMMENDED"
    
    naming_convention:
      category: "NAMING_CONVENTION"
      strictness: "REQUIRED"
    
    project_structure:
      category: "PROJECT_STRUCTURE"
      strictness: "REQUIRED"
    
    design_pattern:
      category: "DESIGN_PATTERN"
      strictness: "RECOMMENDED"
    
    testing_pattern:
      category: "TESTING_PATTERN"
      strictness: "REQUIRED"
    
    security_rule:
      category: "SECURITY"
      strictness: "REQUIRED"
    
    deployment_rule:
      category: "DEPLOYMENT"
      strictness: "REQUIRED"
    
    performance_guideline:
      category: "OPTIMIZATION"
      strictness: "RECOMMENDED"
    
    error_handling:
      category: "ERROR_HANDLING"
      strictness: "REQUIRED"
    
    documentation:
      category: "DOCUMENTATION"
      strictness: "RECOMMENDED"
    
    git_workflow:
      category: "GIT_WORKFLOW"
      strictness: "REQUIRED"
    
    code_review:
      category: "CODE_REVIEW"
      strictness: "RECOMMENDED"
    
    package_management:
      category: "PACKAGE_MANAGEMENT"
      strictness: "REQUIRED"
    
    accessibility:
      category: "ACCESSIBILITY"
      strictness: "REQUIRED"
    
    internationalization:
      category: "INTERNATIONALIZATION"
      strictness: "RECOMMENDED"
